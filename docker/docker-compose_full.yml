version: '3.8'

services:

  api01: &account-app
    #image: rogerbu/account:1.0
    hostname: api01
    build:
      context: ../account
      dockerfile: Dockerfile
    env_file:
      - ./config/env_files/api_env
    environment:
      APP_NAME: "ACCOUNT"
    ports:
      - "8080:8080"
    networks:
      - my-net
    healthcheck:
      test: "curl --fail --silent 127.0.0.1:8080/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 3s
    depends_on:
      accounts-db:
        condition: service_healthy

  api02:
    <<: *account-app
    hostname: api02
    ports:
      - "8081:8080"

  api03:
    <<: *account-app
    hostname: api03
    ports:
      - "8082:8080"

  nginx:
    image: nginx:latest
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - my-net
    depends_on:
      api01:
        condition: service_healthy
      api02:
        condition: service_healthy
      api03:
        condition: service_healthy
    ports:
      - "9999:9999"
    restart: always
    healthcheck:
      test: [ "CMD", "service", "nginx", "status", "||", "exit", "1" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 3s

  accounts-db:
    image: postgres:16
    container_name: accounts-db
    environment:
      POSTGRES_DB: "accounts"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "12345"
    ports:
      - "5432:5432"
    networks:
      - my-net
    volumes:
      - accounts-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 3s

  elasticsearch:
    image: elasticsearch:8.4.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      # Desabilitar autenticação e SSL
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "9200:9200"
    networks:
      - my-net
    volumes:
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 3s

  logstash:
    image: logstash:8.4.3
    container_name: logstash
    environment:
      - xpack.monitoring.enabled=false
    volumes:
      - ./config/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5044:5044"
      - "4560:4560"
    networks:
      - my-net
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:8.4.3
    container_name: kibana
    ports:
      - "5601:5601"
    networks:
      - my-net
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - my-net
    depends_on:
      - elasticsearch
      - prometheus
    volumes:
      - grafana-storage:/var/lib/grafana

  prometheus:
    image: prom/prometheus:v2.24.0
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - my-net

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    networks:
      - my-net
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:12345@accounts-db:5432/accounts?sslmode=disable"
    depends_on:
      - accounts-db
      - prometheus

networks:
  my-net:
    driver: bridge

volumes:
  accounts-db-data:
  es-data:
  grafana-storage: